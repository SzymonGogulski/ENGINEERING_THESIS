#include <stdio.h>
#include "pico/stdlib.h"

#include <cmath>
#include <vector>
#include <cstdint>

#include "arm_math.h"
#include "arm_const_structs.h"
#include "dsp/transform_functions.h"

#define M_PI 3.14159265358979323846

// Parameters
const uint32_t  NUM_SAMPLES             = 256;
const float     NUM_SAMPLES_INV         = 1.0f/NUM_SAMPLES;
const float     SAMPLE_RATE             = 16000.0f;
const uint32_t  FRAME_LENGTH            = 256;
const uint32_t  FRAME_STEP              = 256;
const uint32_t  NUM_OF_DCT_OUTPUTS      = 13;
const float     FREQ_MIN                = 80.0f;
const float     FREQ_HIGH               = 7600.0f;
const uint32_t  NUM_OF_MEL_FILTERS      = 40;

// Precomputed values from python script
/**< PCM signal */
const float32_t pcm[] = { 0.0, 0.24391373, 0.47309357, 0.6736956, 0.83360237, 0.94315445, 0.99573416, 0.9881655, 0.92090553, 0.7980172, 0.6269238, 0.41796035, 0.18374951, -0.061560906, -0.30315268, -0.52643216, -0.7179119, -0.8660254, -0.96182567, -0.9995257, -0.9768483, -0.8951633, -0.7594049, -0.5777738, -0.36124167, -0.12288829, 0.12288829, 0.36124167, 0.5777738, 0.7594049, 0.8951633, 0.9768483, 0.9995257, 0.96182567, 0.8660254, 0.7179119, 0.52643216, 0.30315268, 0.061560906, -0.18374951, -0.41796035, -0.6269238, -0.7980172, -0.92090553, -0.9881655, -0.99573416, -0.94315445, -0.83360237, -0.6736956, -0.47309357, -0.24391373, -4.8985874e-16, 0.24391373, 0.47309357, 0.6736956, 0.83360237, 0.94315445, 0.99573416, 0.9881655, 0.92090553, 0.7980172, 0.6269238, 0.41796035, 0.18374951, -0.061560906, -0.30315268, -0.52643216, -0.7179119, -0.8660254, -0.96182567, -0.9995257, -0.9768483, -0.8951633, -0.7594049, -0.5777738, -0.36124167, -0.12288829, 0.12288829, 0.36124167, 0.5777738, 0.7594049, 0.8951633, 0.9768483, 0.9995257, 0.96182567, 0.8660254, 0.7179119, 0.52643216, 0.30315268, 0.061560906, -0.18374951, -0.41796035, -0.6269238, -0.7980172, -0.92090553, -0.9881655, -0.99573416, -0.94315445, -0.83360237, -0.6736956, -0.47309357, -0.24391373, -9.797175e-16, 0.24391373, 0.47309357, 0.6736956, 0.83360237, 0.94315445, 0.99573416, 0.9881655, 0.92090553, 0.7980172, 0.6269238, 0.41796035, 0.18374951, -0.061560906, -0.30315268, -0.52643216, -0.7179119, -0.8660254, -0.96182567, -0.9995257, -0.9768483, -0.8951633, -0.7594049, -0.5777738, -0.36124167, -0.12288829, 0.12288829, 0.36124167, 0.5777738, 0.7594049, 0.8951633, 0.9768483, 0.9995257, 0.96182567, 0.8660254, 0.7179119, 0.52643216, 0.30315268, 0.061560906, -0.18374951, -0.41796035, -0.6269238, -0.7980172, -0.92090553, -0.9881655, -0.99573416, -0.94315445, -0.83360237, -0.6736956, -0.47309357, -0.24391373, -1.4695761e-15, 0.24391373, 0.47309357, 0.6736956, 0.83360237, 0.94315445, 0.99573416, 0.9881655, 0.92090553, 0.7980172, 0.6269238, 0.41796035, 0.18374951, -0.061560906, -0.30315268, -0.52643216, -0.7179119, -0.8660254, -0.96182567, -0.9995257, -0.9768483, -0.8951633, -0.7594049, -0.5777738, -0.36124167, -0.12288829, 0.12288829, 0.36124167, 0.5777738, 0.7594049, 0.8951633, 0.9768483, 0.9995257, 0.96182567, 0.8660254, 0.7179119, 0.52643216, 0.30315268, 0.061560906, -0.18374951, -0.41796035, -0.6269238, -0.7980172, -0.92090553, -0.9881655, -0.99573416, -0.94315445, -0.83360237, -0.6736956, -0.47309357, -0.24391373, -1.959435e-15, 0.24391373, 0.47309357, 0.6736956, 0.83360237, 0.94315445, 0.99573416, 0.9881655, 0.92090553, 0.7980172, 0.6269238, 0.41796035, 0.18374951, -0.061560906, -0.30315268, -0.52643216, -0.7179119, -0.8660254, -0.96182567, -0.9995257, -0.9768483, -0.8951633, -0.7594049, -0.5777738, -0.36124167, -0.12288829, 0.12288829, 0.36124167, 0.5777738, 0.7594049, 0.8951633, 0.9768483, 0.9995257, 0.96182567, 0.8660254, 0.7179119, 0.52643216, 0.30315268, 0.061560906, -0.18374951, -0.41796035, -0.6269238, -0.7980172, -0.92090553, -0.9881655, -0.99573416, -0.94315445, -0.83360237, -0.6736956, -0.47309357, -0.24391373, -2.4492936e-15 }; 
/**< Internal DCT coefficients */
const float32_t dctCoefs[] = { 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2236068, 0.2234344, 0.22205685, 0.21931025, 0.21521154, 0.20978595, 0.20306699, 0.19509603, 0.18592225, 0.1756022, 0.1641995, 0.15178446, 0.13843362, 0.12422928, 0.10925903, 0.09361517, 0.07739413, 0.06069593, 0.043623522, 0.026282161, 0.008778762, -0.008778762, -0.026282161, -0.043623522, -0.06069593, -0.07739413, -0.09361517, -0.10925903, -0.12422928, -0.13843362, -0.15178446, -0.1641995, -0.1756022, -0.18592225, -0.19509603, -0.20306699, -0.20978595, -0.21521154, -0.21931025, -0.22205685, -0.2234344, 0.2229175, 0.21742852, 0.20658575, 0.19065614, 0.17003195, 0.145221, 0.11683423, 0.08557062, 0.05219997, 0.017543986, -0.017543986, -0.05219997, -0.08557062, -0.11683423, -0.145221, -0.17003195, -0.19065614, -0.20658575, -0.21742852, -0.2229175, -0.2229175, -0.21742852, -0.20658575, -0.19065614, -0.17003195, -0.145221, -0.11683423, -0.08557062, -0.05219997, -0.017543986, 0.017543986, 0.05219997, 0.08557062, 0.11683423, 0.145221, 0.17003195, 0.19065614, 0.20658575, 0.21742852, 0.2229175, 0.22205685, 0.20978595, 0.18592225, 0.15178446, 0.10925903, 0.06069593, 0.008778762, -0.043623522, -0.09361517, -0.13843362, -0.1756022, -0.20306699, -0.21931025, -0.2234344, -0.21521154, -0.19509603, -0.1641995, -0.12422928, -0.07739413, -0.026282161, 0.026282161, 0.07739413, 0.12422928, 0.1641995, 0.19509603, 0.21521154, 0.2234344, 0.21931025, 0.20306699, 0.1756022, 0.13843362, 0.09361517, 0.043623522, -0.008778762, -0.06069593, -0.10925903, -0.15178446, -0.18592225, -0.20978595, -0.22205685, 0.22085382, 0.19923511, 0.15811388, 0.10151536, 0.03497981, -0.03497981, -0.10151536, -0.15811388, -0.19923511, -0.22085382, -0.22085382, -0.19923511, -0.15811388, -0.10151536, -0.03497981, 0.03497981, 0.10151536, 0.15811388, 0.19923511, 0.22085382, 0.22085382, 0.19923511, 0.15811388, 0.10151536, 0.03497981, -0.03497981, -0.10151536, -0.15811388, -0.19923511, -0.22085382, -0.22085382, -0.19923511, -0.15811388, -0.10151536, -0.03497981, 0.03497981, 0.10151536, 0.15811388, 0.19923511, 0.22085382, 0.21931025, 0.18592225, 0.12422928, 0.043623522, -0.043623522, -0.12422928, -0.18592225, -0.21931025, -0.21931025, -0.18592225, -0.12422928, -0.043623522, 0.043623522, 0.12422928, 0.18592225, 0.21931025, 0.21931025, 0.18592225, 0.12422928, 0.043623522, -0.043623522, -0.12422928, -0.18592225, -0.21931025, -0.21931025, -0.18592225, -0.12422928, -0.043623522, 0.043623522, 0.12422928, 0.18592225, 0.21931025, 0.21931025, 0.18592225, 0.12422928, 0.043623522, -0.043623522, -0.12422928, -0.18592225, -0.21931025, 0.21742852, 0.17003195, 0.08557062, -0.017543986, -0.11683423, -0.19065614, -0.2229175, -0.20658575, -0.145221, -0.05219997, 0.05219997, 0.145221, 0.20658575, 0.2229175, 0.19065614, 0.11683423, 0.017543986, -0.08557062, -0.17003195, -0.21742852, -0.21742852, -0.17003195, -0.08557062, 0.017543986, 0.11683423, 0.19065614, 0.2229175, 0.20658575, 0.145221, 0.05219997, -0.05219997, -0.145221, -0.20658575, -0.2229175, -0.19065614, -0.11683423, -0.017543986, 0.08557062, 0.17003195, 0.21742852, 0.21521154, 0.15178446, 0.043623522, -0.07739413, -0.1756022, -0.22205685, -0.20306699, -0.12422928, -0.008778762, 0.10925903, 0.19509603, 0.2234344, 0.18592225, 0.09361517, -0.026282161, -0.13843362, -0.20978595, -0.21931025, -0.1641995, -0.06069593, 0.06069593, 0.1641995, 0.21931025, 0.20978595, 0.13843362, 0.026282161, -0.09361517, -0.18592225, -0.2234344, -0.19509603, -0.10925903, 0.008778762, 0.12422928, 0.20306699, 0.22205685, 0.1756022, 0.07739413, -0.043623522, -0.15178446, -0.21521154, 0.2126627, 0.13143277, 1.36919675e-17, -0.13143277, -0.2126627, -0.2126627, -0.13143277, -4.1075903e-17, 0.13143277, 0.2126627, 0.2126627, 0.13143277, 6.8459837e-17, -0.13143277, -0.2126627, -0.2126627, -0.13143277, -9.584377e-17, 0.13143277, 0.2126627, 0.2126627, 0.13143277, 1.232277e-16, -0.13143277, -0.2126627, -0.2126627, -0.13143277, -5.4781713e-16, 0.13143277, 0.2126627, 0.2126627, 0.13143277, -2.1920989e-16, -0.13143277, -0.2126627, -0.2126627, -0.13143277, -6.0258496e-16, 0.13143277, 0.2126627, 0.20978595, 0.10925903, -0.043623522, -0.1756022, -0.2234344, -0.1641995, -0.026282161, 0.12422928, 0.21521154, 0.20306699, 0.09361517, -0.06069593, -0.18592225, -0.22205685, -0.15178446, -0.008778762, 0.13843362, 0.21931025, 0.19509603, 0.07739413, -0.07739413, -0.19509603, -0.21931025, -0.13843362, 0.008778762, 0.15178446, 0.22205685, 0.18592225, 0.06069593, -0.09361517, -0.20306699, -0.21521154, -0.12422928, 0.026282161, 0.1641995, 0.2234344, 0.1756022, 0.043623522, -0.10925903, -0.20978595, 0.20658575, 0.08557062, -0.08557062, -0.20658575, -0.20658575, -0.08557062, 0.08557062, 0.20658575, 0.20658575, 0.08557062, -0.08557062, -0.20658575, -0.20658575, -0.08557062, 0.08557062, 0.20658575, 0.20658575, 0.08557062, -0.08557062, -0.20658575, -0.20658575, -0.08557062, 0.08557062, 0.20658575, 0.20658575, 0.08557062, -0.08557062, -0.20658575, -0.20658575, -0.08557062, 0.08557062, 0.20658575, 0.20658575, 0.08557062, -0.08557062, -0.20658575, -0.20658575, -0.08557062, 0.08557062, 0.20658575, 0.20306699, 0.06069593, -0.12422928, -0.22205685, -0.1641995, 0.008778762, 0.1756022, 0.21931025, 0.10925903, -0.07739413, -0.20978595, -0.19509603, -0.043623522, 0.13843362, 0.2234344, 0.15178446, -0.026282161, -0.18592225, -0.21521154, -0.09361517, 0.09361517, 0.21521154, 0.18592225, 0.026282161, -0.15178446, -0.2234344, -0.13843362, 0.043623522, 0.19509603, 0.20978595, 0.07739413, -0.10925903, -0.21931025, -0.1756022, -0.008778762, 0.1641995, 0.22205685, 0.12422928, -0.06069593, -0.20306699, 0.19923511, 0.03497981, -0.15811388, -0.22085382, -0.10151536, 0.10151536, 0.22085382, 0.15811388, -0.03497981, -0.19923511, -0.19923511, -0.03497981, 0.15811388, 0.22085382, 0.10151536, -0.10151536, -0.22085382, -0.15811388, 0.03497981, 0.19923511, 0.19923511, 0.03497981, -0.15811388, -0.22085382, -0.10151536, 0.10151536, 0.22085382, 0.15811388, -0.03497981, -0.19923511, -0.19923511, -0.03497981, 0.15811388, 0.22085382, 0.10151536, -0.10151536, -0.22085382, -0.15811388, 0.03497981, 0.19923511 };
/* Internal Mel filter coefficients */
const float32_t filterCoefs[] = { 0.972492, 0.7613816, 0.23861839, 0.5814552, 0.41854483, 0.47673586, 0.52326417, 0.43820822, 0.5617918, 0.45838666, 0.54161334, 0.5309876, 0.46901235, 0.6506855, 0.3493145, 0.812927, 0.0137888715, 0.187073, 0.9862111, 0.24986672, 0.7501333, 0.51818734, 0.48181263, 0.8161389, 0.14141457, 0.18386108, 0.8585854, 0.4919668, 0.5080332, 0.86597, 0.26178944, 0.13402998, 0.73821056, 0.67795557, 0.1131425, 0.32204443, 0.8868575, 0.5661499, 0.03588752, 0.4338501, 0.96411246, 0.5213623, 0.02166696, 0.4786377, 0.97833306, 0.53597057, 0.063510045, 0.46402943, 0.93648994, 0.60358316, 0.15554199, 0.39641687, 0.84445804, 0.7187877, 0.2927656, 0.2812123, 0.7072344, 0.8769608, 0.47089475, 0.07412167, 0.12303918, 0.52910525, 0.92587835, 0.68622565, 0.30681825, 0.31377432, 0.69318175, 0.9355358, 0.57203764, 0.216004, 0.06446421, 0.4279624, 0.783996, 0.8671345, 0.52514654, 0.18977386, 0.13286547, 0.47485346, 0.81022614, 0.86076534, 0.537884, 0.22090574, 0.13923465, 0.462116, 0.7790943, 0.9096186, 0.6038218, 0.3033251, 0.007947786, 0.0903814, 0.3961782, 0.69667494, 0.9920522, 0.7175184, 0.43187395, 0.15085924, 0.28248158, 0.5681261, 0.84914076, 0.8743266, 0.60213536, 0.3341512, 0.070246145, 0.1256734, 0.39786467, 0.6658488, 0.92975384, 0.81029785, 0.5541894, 0.30180895, 0.053049628, 0.18970217, 0.44581065, 0.69819105, 0.9469504, 0.80780894, 0.5659887, 0.3274949, 0.09223718, 0.19219106, 0.43401128, 0.6725051, 0.9077628, 0.86012894, 0.63108695, 0.4050312, 0.1818849, 0.13987108, 0.36891308, 0.5949688, 0.8181151, 0.9615741, 0.7440276, 0.5291769, 0.31695607, 0.107301414, 0.03842591, 0.25597242, 0.47082308, 0.68304396, 0.8926986, 0.90015167, 0.6954477, 0.49313232, 0.29315054, 0.095449105, 0.09984834, 0.30455235, 0.5068677, 0.70684946, 0.9045509, 0.8999766, 0.70668334, 0.5155212, 0.3264438, 0.13940607, 0.100023404, 0.2933167, 0.4844788, 0.6735562, 0.8605939, 0.95436454, 0.771277, 0.5901027, 0.4108019, 0.2333364, 0.05766896, 0.045635473, 0.228723, 0.40989736, 0.5891981, 0.7666636, 0.942331, 0.8837635, 0.71158504, 0.5410996, 0.37227428, 0.20507695, 0.03947657, 0.116236486, 0.28841496, 0.45890036, 0.6277257, 0.79492307, 0.9605234, 0.8754429, 0.7129466, 0.55195916, 0.3924527, 0.23440029, 0.07777567, 0.124557085, 0.28705338, 0.44804087, 0.6075473, 0.7655997, 0.92222434, 0.92255324, 0.76870817, 0.6162162, 0.46505368, 0.3151977, 0.16662587, 0.019316336, 0.077446744, 0.23129183, 0.38378382, 0.5349463, 0.6848023, 0.83337414, 0.9806837, 0.87324786, 0.72839963, 0.58475155, 0.44228378, 0.30097714, 0.16081287, 0.021772603, 0.12675215, 0.27160037, 0.41524845, 0.5577162, 0.6990228, 0.83918715, 0.9782274, 0.8838385, 0.746993, 0.6112192, 0.47650036, 0.34282023, 0.21016291, 0.07851286 };
/* Windowing coefficients */ 
const float32_t windowCoefs[] = { 0.08000000000000007, 0.08013854339974613, 0.08055409014562076, 0.08124638992780259, 0.08221502573078954, 0.08345941408459351, 0.08497880541620079, 0.0867722845010871, 0.0888387710145141, 0.09117702018227697, 0.09378562353050984, 0.09666300973409775, 0.099807445563184, 0.10321703692720319, 0.10688973001581054, 0.11082331253602018, 0.11501541504480817, 0.11946351237637592, 0.12416492516321614, 0.1291168214500631, 0.13431621839975677, 0.13975998408999285, 0.14544483939987496, 0.1513673599851348, 0.1575239783408292, 0.1639109859502716, 0.17052453551890345, 0.1773606432917612, 0.18441519145314106, 0.19168393060701727, 0.19916248233671896, 0.20684634184232537, 0.21473088065418822, 0.22281134942094927, 0.2310828807703716, 0.23954049224126273, 0.2481790892847232, 0.25699346833291176, 0.2659783199334807, 0.2751282319477912, 0.28443769281098313, 0.2939010948519354, 0.3035127376711181, 0.3132668315742994, 0.32315750106004115, 0.33317878835888093, 0.3433246570220702, 0.35358899555770473, 0.36396562111205877, 0.3744482831939055, 0.38503066743957887, 0.39570639941651, 0.40646904846294746, 0.41731213156154684, 0.42822911724449864, 0.43921342952784, 0.45025845187258107, 0.46135753117026146, 0.4725039817505337, 0.4836910894083606, 0.49491211544840213, 0.5061603007441531, 0.5174288698093877, 0.5287110348794605, 0.54, 0.5512889651205397, 0.5625711301906123, 0.5738396992558471, 0.585087884551598, 0.5963089105916395, 0.6074960182494664, 0.6186424688297386, 0.6297415481274191, 0.6407865704721601, 0.6517708827555014, 0.6626878684384533, 0.6735309515370527, 0.6842936005834901, 0.6949693325604213, 0.7055517168060946, 0.7160343788879413, 0.7264110044422953, 0.7366753429779297, 0.7468212116411191, 0.756842498939959, 0.7667331684257007, 0.776487262328882, 0.7860989051480647, 0.795562307189017, 0.804871768052209, 0.8140216800665194, 0.8230065316670884, 0.831820910715277, 0.8404595077587373, 0.8489171192296285, 0.8571886505790509, 0.865269119345812, 0.8731536581576748, 0.8808375176632812, 0.888316069392983, 0.895584808546859, 0.9026393567082389, 0.9094754644810967, 0.9160890140497284, 0.9224760216591709, 0.9286326400148652, 0.9345551606001252, 0.9402400159100073, 0.9456837816002432, 0.950883178549937, 0.955835074836784, 0.9605364876236242, 0.9649845849551919, 0.9691766874639799, 0.9731102699841896, 0.9767829630727969, 0.9801925544368162, 0.9833369902659024, 0.9862143764694902, 0.9888229798177232, 0.991161228985486, 0.993227715498913, 0.9950211945837992, 0.9965405859154066, 0.9977849742692106, 0.9987536100721974, 0.9994459098543793, 0.9998614566002539, 1.0, 0.9998614566002539, 0.9994459098543793, 0.9987536100721974, 0.9977849742692106, 0.9965405859154066, 0.9950211945837992, 0.993227715498913, 0.991161228985486, 0.9888229798177232, 0.9862143764694902, 0.9833369902659024, 0.9801925544368162, 0.9767829630727969, 0.9731102699841896, 0.9691766874639799, 0.9649845849551919, 0.9605364876236242, 0.955835074836784, 0.950883178549937, 0.9456837816002432, 0.9402400159100073, 0.9345551606001252, 0.9286326400148652, 0.9224760216591709, 0.9160890140497284, 0.9094754644810967, 0.9026393567082389, 0.895584808546859, 0.888316069392983, 0.8808375176632812, 0.8731536581576748, 0.865269119345812, 0.8571886505790509, 0.8489171192296285, 0.8404595077587373, 0.8318209107152771, 0.8230065316670885, 0.8140216800665192, 0.8048717680522088, 0.795562307189017, 0.7860989051480647, 0.776487262328882, 0.7667331684257007, 0.756842498939959, 0.7468212116411191, 0.7366753429779299, 0.7264110044422956, 0.7160343788879415, 0.7055517168060944, 0.6949693325604211, 0.6842936005834901, 0.6735309515370527, 0.6626878684384533, 0.6517708827555014, 0.6407865704721603, 0.6297415481274191, 0.6186424688297387, 0.6074960182494666, 0.5963089105916393, 0.5850878845515978, 0.573839699255847, 0.5625711301906122, 0.5512889651205397, 0.54, 0.5287110348794605, 0.5174288698093878, 0.5061603007441532, 0.49491211544840236, 0.4836910894083608, 0.4725039817505335, 0.46135753117026135, 0.45025845187258096, 0.4392134295278399, 0.42822911724449864, 0.41731213156154684, 0.40646904846294746, 0.3957063994165101, 0.385030667439579, 0.37444828319390566, 0.3639656211120586, 0.3535889955577046, 0.3433246570220702, 0.33317878835888093, 0.32315750106004115, 0.3132668315742994, 0.3035127376711181, 0.2939010948519354, 0.28443769281098313, 0.27512823194779135, 0.2659783199334809, 0.2569934683329116, 0.24817908928472304, 0.23954049224126273, 0.2310828807703716, 0.22281134942094927, 0.21473088065418822, 0.20684634184232537, 0.19916248233671896, 0.19168393060701727, 0.18441519145314123, 0.17736064329176138, 0.17052453551890334, 0.16391098595027148, 0.1575239783408292, 0.1513673599851348, 0.14544483939987496, 0.13975998408999285, 0.13431621839975677, 0.1291168214500631, 0.12416492516321626, 0.11946351237637604, 0.11501541504480828, 0.11082331253602012, 0.10688973001581048, 0.10321703692720319, 0.099807445563184, 0.09666300973409775, 0.09378562353050984, 0.09117702018227697, 0.0888387710145141, 0.0867722845010871, 0.08497880541620084, 0.08345941408459345, 0.08221502573078948, 0.08124638992780259, 0.08055409014562076, 0.08013854339974613 };
const uint32_t filterPos[] = { 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 19, 21, 23, 25, 27, 29, 31, 34, 36, 39, 42, 45, 49, 52, 56, 60, 64, 68, 73, 78, 83, 89, 95, 101, 108 }; /**< Internal Mel filter positions in spectrum */ 
const uint32_t filterLengths[] = { 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14 }; /**< Internal Mel filter  lengths */ 
const uint32_t fftLen = 256; /* FFT length */
const uint32_t nbMelFilters = 40; /* Number of Mel filters */
const uint32_t nbDctOutputs = 13; /* Number of DCT outputs */
const uint32_t window_num = 0; /**< Number of windows */

static float32_t pSrc[fftLen];
static float32_t pTmp [fftLen + 2];
static float32_t pDst[nbDctOutputs];

int main(){

    stdio_init_all();
    sleep_ms(10000);
    printf("Starting workflow. \n");

    // Create and initialize MFCC F32 instance
    arm_mfcc_instance_f32 mfccInstance;
    mfccInstance.dctCoefs = dctCoefs;
    mfccInstance.filterCoefs = filterCoefs;
    mfccInstance.windowCoefs = windowCoefs;
    mfccInstance.filterPos = filterPos;
    mfccInstance.filterLengths = filterLengths;
    mfccInstance.fftLen = fftLen;
    mfccInstance.nbMelFilters = nbMelFilters;
    mfccInstance.nbDctOutputs = nbDctOutputs;
    
    // Initialize the RFFT
    arm_rfft_fast_instance_f32 rfft;
    arm_rfft_fast_init_f32(&rfft, fftLen);
    mfccInstance.rfft = rfft;

    // Check if initialization was successful
    arm_status status = arm_mfcc_init_f32(&mfccInstance, fftLen, nbMelFilters, nbDctOutputs, dctCoefs, filterPos, filterLengths, filterCoefs, windowCoefs);

    if (status != ARM_MATH_SUCCESS){
        printf("Failed to initialize MFCC instance. \n");
        return 0;
    }

    // Extract first signal frame
    for (int i = 0; i < fftLen; i++) {
        pSrc[i] = pcm[i];
    }

    // Calculate mfcc coefitients of the first signal frame
    arm_mfcc_f32(&mfccInstance, pSrc, pDst, pTmp);
    
    // Print out calculated MFCC coefitients
    printf("[");
    for (int i=0; i<nbDctOutputs; i++){
        printf("%.4f, ", pDst[i]);
    }
    printf("]\n");

    // All done
    return 0;
}